\section{Introdução}

A contrução de compiladores, bem como o estudo do mesmo é algo antigo que acontece desde os primórdios da computação,
visto que desde sempre, fez-se necessário a comunicação com as máquinas e, a evolução dos compiladores e também
das linguagens de programação se baseou no estudo de técnicas que visavam melhorar tal comunicação.

Posto de forma simples, um compilador é um programa fonte que lê um programa escrito numa linguagem - a linguagem -
fonte e o traduz em um programa equivalente em uma outra linguagem - a linguagem alvo (como visto na figura abaixo)
\cite{AHO1995}.

\begin{figure}[!htb]
 \centering
 \includegraphics[scale=0.6]{imagens/fig3.jpg}
 \caption{Um Compilador \cite{AHO1995}.}
\end{figure}

\section{Compiladores}


Conforme Knuth e Trabb  [KP80],  o termo compilador não era ainda utilizado nessa época. Na verdade falava-se
sobre programação automática. No início da programação em linguagem de máquina foram desenvolvidas subrotinas de uso
comum para entrada e saída, para aritmética de ponto flutuante e funções  transcendentais. Junto com a idéia de um
endereçamento realocável - pois tais subrotinas seriam usadas em diferentes partes de um programa - foram criadas
rotinas de montagem para facilitar a tarefa de uso das subrotinas e de endereçamento relativo, idéia desenvolvida por
Maurice V. Wilkes. Para isso foi inventada uma pseudo linguagem de máquina. Uma rotina interpretativa iria processar
essas instruções, emulando um computador hipotético. Esse é o sentido do termo 'compilador' até
aqui usado \cite{Cleuzio2007}.

Nos primórdios dos computadores, programar era uma tarefa extremamente complicada e, de certa forma, extenuante.
Aos programadores era exigido um conhecimento detalhado das instruções, registos e outros aspectos ligados com 
a unidade de processamento central (CPU) do computador onde era escrito o código. Os programas consistiam numa série
de instruções numéricas, denominadas por código binário. Posteriormente, desenvolveram-se algumas mnemónicas que
resultaram no designado assembly \cite{Abel2000}.

O AUTOCODE foi o primeiro 'compilador' real, que tomava uma declaração algébrica e a traduzia em linguagem de máquina.
Seu desconhecido autor, Alick E. Glennie, das forças armadas da Inglaterra, declarava em Cambridge, em 1953, sua
motivação para elaborá-lo: 'A dificuldade da programação tornou-se a principal dificuldade para o uso das máquinas.
Aiken expressou sua opinião dizendo que a solução para esta dificuldade deveria ser buscada pela construção de uma
máquina especial para codificar(...) Para tornar isso fácil deve-se elaborar um código compreensível. Tal coisa 
somente pode ser feita melhorando-se a notação da programação'. 

John Backus discute essa distinção
que Knuth faz, citando J. Halcomb Laning, Jr. e Niel Zierler como os inventores do primeiro 'compilador' algébrico,
para o computador Whirlwind. Como esta, são muitas as discussões ainda hoje sobre quem foi o pioneiro no assunto.
De qualquer maneira esses primeiros sistemas denominados genericamente de programação automática (acima citada)
eram muito lentos e não fizeram muito sucesso, embora tivessem sido fundamentais para preparar a base do 
desenvolvimento que se seguiu \cite{Cleuzio2007}.

Este veio com o A-0, agora sim o primeiro compilador propriamente dito, desenvolvido por Grace Murray Hopper e
equipe, aprimorado para A-1 e A-2 subseqüentemente. O próximo passo seria o A-3, desenvolvido em 1955, produzido ao
mesmo tempo com o tradutor algébrico AT-3, mais tarde chamado MATH-MATIC \cite{Cleuzio2007}.

Em 1952 a IBM construía o computador 701 e em 1953 foi montada uma equipe liderada por John Backus para desenvolver
um código automático que facilitasse a programação. O resultado foi o Speedcoding. Backus tornou-se uma das principais
figuras na história da evolução das linguagens de programação, tendo um papel fundamental no desenvolvimento dos
grandes compiladores que viriam a partir do ano de 1955 como o FORTRAN e o ALGOL, além do estabelecimento da moderna
notação formal para a descrição sintática de linguagens de programação, denominada BNF, Backus Normal Form
\cite{Cleuzio2007}.

 No período entre 1954-1957 uma equipa de 13 programadores liderados por John Backus
desenvolveu uma das primeiras linguagens de alto nível para o computador IBM 704, o FORTRAN (FORmula TRANslation).
O objetivo deste projecto era produzir uma linguagem de fácil interpretação, mas ao mesmo tempo, com uma eficiência
idêntica à linguagem assembly \cite{Abel2000}.

A linguagem Fortran foi ao mesmo tempo revolucionária e inovadora. Os programadores libertaram-se assim da tarefa
extenuante de usar a linguagem assembler e passaram a ter oportunidade de se concentrar mais na resolução do problema.
Mas, talvez mais importante, foi o fato dos computadores passarem a ficar mais acessíveis a qualquer pessoa com
vontade de despender um esforço mínimo para conhecer a linguagem Fortran. A partir dessa altura, já não era preciso
ser um especialista em computadores para escrever programas para computador \cite{Abel2000}.

\section{Trabalhos Relacionados}

Existem alguns trabalhos semelhantes a este. Uns mais, outro menos, mas todos com a proposta de colocar um compilador
disponível de maneira online, por meio apenas de um navegador. A questão a ser discutida sempre é sobre a proposta
do trabalho, ou seja, qual o motivo de tê-lo, é isto que muda a perspectiva do trabalho e maneira de implementá-lo.
Com certeza o projeto que mais se parece com este, o qual tem uma ótima proposta e foi muito bem feito é o
\textit{CodeSchool}. O ponto que é o difere é a proposta de venda de informação, através de cursos online, sendo
o compilador uma parte de um todo.

O grande diferencial do trabalho aqui proposto é que ainda não existe um compilador online para a linguagem de
programação Portugol, sendo este o primeiro que se tem notícia.

Vejamos agora nas seções abaixo alguns trabalhos relacionados.

\subsection{Codepad}

O [codepad, 2011] é um compilador e interpretador online, além de ser uma simples ferramenta de colaboração. Tem 
a função de \textit{pastebin}* que executa código para o usuário. O usuário cola o código e o [codepad, 2011]
o compila, dando ao usuário um URL que você pode usar para compartilhar o resultado com outros. O usuário pode
também, simplesmente, colocar algum código e compilar, quando este não estiver com um compilador instalado em 
seu computador. O [codepad, 2011] funciona em alguns celulares e \textit{tablets}.

O [codepad, 2011] foi escrito(e ainda é mantido) por Steven Hazel. O site [codepad, 2011] foi escrito em
\textit{Python}, usando \textit{Pylons} e \textit{SQLAlchemy}.

O [codepad, 2011] possui suporte a várias linguagens. São elas(com seus respectivos compiladores):

\begin{itemize}
 \item C: gcc 4.1.2
 \item C++: g++ 4.1.2
 \item D: Digital Mars D Compiler v1.026
 \item Haskell: Hugs, Setembro 2006
 \item Lua: Lua 5.1.3
 \item OCaml: Objective Caml version 3.10.1
 \item PHP: PHP 5.2.5
 \item Perl: Perl v5.8.0
 \item Python Python 2.5.1
 \item Ruby: Ruby 1.8.6
 \item Scheme: MzScheme v372 [cgc]
 \item Tcl: tclsh 8.4.16
\end{itemize}

Na figura abaixo podemos ver a tela inicial do [codepad, 2011]:

\begin{figure}[!htb]
 \centering
 \includegraphics[scale=0.4]{imagens/fig4.jpg}
 \caption{Tela do compilador online CodePad. codepad.org}
\end{figure}

Nessa tela o usuário seleciona a linguagem a qual ele irá utilizar e então coloca o código no campo em branco. Após
isso o usuário clica em 'submit' e tem a resposta do compilador.

\subsection{Ideone}

Este é um dos mais completos e robustos compiladores online. Possui uma grande variedade de linguagens suportadas (até
a data deste trabalho, mais de 40), e inclusive, marcação de sintaxe(\textit{sintax highlight}), funcionando como
um bom editor de programação. Ele também pode ser utilizado como um \textit{pastebin}, mas é muito mais do que isso, 
funcionando muitas vezes até como um debugger.

Suas características principais são:

\begin{itemize}
 \item Compartilhamento de código;
 \item Compilar código diretamente do navegador em mais de 40 linguagens de programação;
 \item Possui uma API para que o usuário possa construir seu próprio compilador online;
 \item Oferece a possibilidade de gerenciar programas já feitos através de um cadastro anterior.
\end{itemize}

Abaixo a tela do Ideone:

\begin{figure}[!htb]
 \centering
 \includegraphics[scale=0.5]{imagens/fig5.jpg}
 \caption{Tela do compilador online Ideone.}
\end{figure}

Essa tela é similar a tela anterior. O usuário deve selecionar a linguagem a ser utilizada e então clicar em 'submit'
para que o compilador retorne com a resposta.

\subsection{CodeSchool}

Este é mais do que apenas um compilador online, o Code School tem um objetivo diferente. Ele não é apenas um
campo de texto no qual o usuário digita seu código e tudo é compilado, ele é mais do que isso. O Code School é
uma plataforma de ensino, no qual o usuário pode ler textos, ver vídeos e programar na prática determinada
linguagem, facilitando seu aprendizado. Abaixo um trecho dos criadores sobre o Code School:

'A maioria das pessoas não aprendem programação e \textit{design} para a web lendo livros. Aprendizados verdadeiros
acontecem quando você começa a experimentar o código no navegador e usa conceitos de design em um website.
Na nossa opinião, a melhor maneira de aprender é fazendo. Code School abre as portas para uma nova maneira de
aprendizado, combinando vídeos, codificação no navegador e jogos para fazer o aprendizado de uma nova tecnologia
divertido'.

Code School foi criado pelos cientistas da \textit{Envy Labs}, uma equipe de desenvolvedores de software web.
Abaixo uma imagem da tela do Code School:

\begin{figure}[!htb]
 \centering
 \includegraphics[scale=0.4]{imagens/fig6.png}
 \caption{Tela de exercícios do compilador CodeSchool.}
\end{figure}

Nessa página o usuário é capaz de digitar o código e receber a resposta do compilador.

\subsection{Rails for Zombies}

Este é o mais alternativo de todos acima apresentado. Sua intenção é a de ensinar o \textit{Ruby on Rails} por meio
de uma metodologia simples e bem humorada, através de uma interface diferente, com vídeos divertidos e tudo
muito bem feito. O \textit{Rails for Zombies} foi feito para quem está começando com programação. O usuário
vai passando por níveis a medida que codifica os exercícios da maneira correta. O seu editor é bem simples e fácil
de usar e, o compilador, responde de maneira muito rápida.

Este website ficou muito famoso devido a sua técnica utilizada para o ensino e também por causa da velocidade
que seu compilador apresentava, ficando fácil e rápido escrever o código dentro dele.

Abaixo uma imagem da tela do \textit{Rails for Zombies}:

\begin{figure}[!htb]
 \centering
 \includegraphics[scale=0.8]{imagens/fig7.jpg}
 \caption{codeschool.com}
\end{figure}


\section{Conclusão}

Pode-se concluir que esta área é ainda nova, mas que se apresenta interessante e vários profissionais da área de
computação vêm mostrando que ela é importante. O fato é que para vários fins, se faz necessário a presença de um
compilador online, pois esse poderá ser acessado de qualquer lugar, indepedente da máquina.
